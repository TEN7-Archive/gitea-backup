# Create the Role and RoleBinding necessary to get files from Gitea.
rbac:
  create: true

# Container configuration.
image:
  repository: ten7/gitea-backup
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

#
# Backup configuration.
#
# Here is where you'll do most of your configuration for the backup process.
#
gitea_backup:
  config:

    # The prefix to use for the backup file names.
    prefix: "gitea-dump"
    # The backup format, accepts whatever `gitea dump` supports.
    format: "tar.gz"

    # The namespace, name, and label selector of the Gitea container.
    gitea:
      namespace: "gitea"
      containerName: "gitea"
      lablelSelector: "app=gitea"

    # List of destinations. While two are shown below, any number are supported.
    #
    # There are two `type`s of destinations, `s3`, and `sftp`.
    #
    destinations:
      # - name: "Remote bucket"
      #   type: s3
      #   bucket: "my-example-bucket"
      #   path: "backups/gitea"
      #   accessKeyFile: "/config/my-example-bucket/s3-key.txt"
      #   secretKeyFile: "/config/my-example-bucket/s3-secret.txt"
      #   endpoint: "s3.example.com"
      #   hostBucket: "my-example-bucket.s3.example.com"
      #   s3Url: "https://my-example-bucket.s3.example.com"
      #   region: "abc"
      #   httpPing: "https://example.com/my_ping_service"
      #   disabled: false

      ## Where:
      ## * `name` is the name of the backup, useful for logging purposes. Optional.
      ## * `type` is `s3`.
      ## * `bucket` is the name of the target bucket. Required.
      ## * `path` is the path in the bucket to use to store the backup.
      ## * `accessKey` is the access key to the S3 bucket. Required if `accessKeyFile` is not specified.
      ## * `accessKeyFile` is the path in the backup container to a file containing the S3 access key. See `extraVolumes` and `extraVolumeMounts` on how to mount a secret into the backup container.
      ## * `secretKey` is the secret key to the S3 bucket. Required if `secretKeyFile` is not specified.
      ## * `secretKeyFile` is the path in the backup container to a file containing the S3 secret key. See `extraVolumes` and `extraVolumeMounts` on how to mount a secret into the backup container.
      ## * `endpoint` is the S3 endpoint URL. Required if not using AWS.
      ## * `hostBucket` is the hostname of the bucket, typically `bucketName.s3EndPointHostname.tld`. Required if not using AWS.
      ## * `s3Url` is the full URL to the S3 bucket, including protocol, typically `https://bucketName.s3EndPointHostname.tld`. Required if not using AWS.
      ## * `region` is the S3 region on which the bucket resides.
      ## * `httpPing` is the URL for a ping service such as HC.io, BetterUptime or others to ping when the backup completes. Optional.
      ## * `disabled` is `true` to disable (ignore) this destination. Optional, defaults to `false`.

      # - name: "Offsite sftp"
      #   type: sftp
      #   host: "sftp.example.com"
      #   user: "example"
      #   keyFile: "/config/example-key/id_rsa"
      #   pubKeyFile: "/config/example-key/id_rsa.pub"
      #   path: "backups/gitea"
      #   httpPing: "https://example.com/my_ping_service"
      #   disabled: false

      ## Where:
      ## * `name` is the name of the backup, useful for logging purposes. Optional.
      ## * `type` is `sftp`.
      ## * `host` is the hostname of the SFTP server. Required.
      ## * `user` is the username with which to connect to the SFTP server. Required.
      ## * `keyFile` is the path to an SSH private key. Required. See `extraVolumes` and `extraVolumeMounts` on how to mount a secret into the backup container.
      ## * `pubKeyFile` is the path to an SSH public key. Required. See `extraVolumes` and `extraVolumeMounts` on how to mount a secret into the backup container.
      ## * `path` is the path in the bucket to use to store the backup.
      ## * `httpPing` is the URL for a ping service such as HC.io, BetterUptime or others to ping when the backup completes. Optional.
      ## * `disabled` is `true` to disable (ignore) this destination. Optional, defaults to `false`.

# Defines the backup cronjob.
cronjob:
  schedule: "0 0 * * *"
  concurrencyPolicy: "Forbid"
  restartPolicy: "Never"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1

# Additional volumes to add to the gitea-backup cronjob.
#
# Use this to define additional secrets which contain bucket or SFTP credientals.
extraVolumes:
# - name: vol-secret-my-example-bucket
#   secret:
#     defaultMode: 420
#     secretName: my-example-bucket
# - name: vol-secret-example-key
#   secret:
#     defaultMode: 420
#     secretName: example-key


# Additional volumes to mount.
extraVolumeMounts:
# - name: vol-secret-my-example-bucket
#   mountPath: "/config/my-example-bucket"
# - name: vol-secret-example-key
#   mountPath: "/config/example-key"

#
# The service account is used to authenticate with k8s API to get files.
#
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
