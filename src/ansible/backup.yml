---
- hosts: backup
  tasks:
    - name: Fail if there's no config.
      fail:
        msg: "Could not find config file for Gitea Backup."
      when:
        - gitea_backup | default({}) | length < 1

    - name: Fetch the Gitea pod definition(s)
      set_fact:
        _gitea_pod_def: "{{ lookup('k8s', kind='pod', namespace=gitea_backup.gitea.namespace, label_selector=gitea_backup.gitea.lablelSelector) }}"
    - fail:
        msg: "Could not find pod with correct label selector (app=gitea)"
      when:
        - "(_gitea_pod_def | default([])) | length < 1"

    - debug:
        msg: "{{ _gitea_pod_def.metadata.name }}"

    - name: Generate the backup file prefix.
      set_fact:
        _backup_file_prefix: "{{ gitea_backup.prefix | default('gitea-backup')}}"
        _backup_file_suffix: "{{ gitea_backup.format | default('tar.gz') }}"

    - name: Create a new backup dump where we can find it.
      kubernetes.core.k8s_exec:
        namespace: "{{ _gitea_pod_def.metadata.namespace }}"
        pod: "{{ _gitea_pod_def.metadata.name }}"
        container: "{{ gitea_backup.gitea.containerName }}"
        command: >
          gitea dump
          --type {{ _backup_file_suffix }}
          --file /tmp/{{ _backup_file_prefix }}

    - name: Create a temp directory to hold the backup
      tempfile:
        state: directory
        prefix: "gitea-backup"
      register: _run_temp_dir
      notify:
        - delete temp items

    - name: Generate the backup file name.
      set_fact:
        _backup_file_name: "{{ _backup_file_prefix }}.{{ _backup_file_suffix }}"
        _backup_file_path: "{{ _run_temp_dir.path }}/{{ _backup_file_prefix }}.{{ _backup_file_suffix }}"

    ##
    ## This should work, but fails due to a library issue.
    ##
    # - name: Copy backup to local
    #   kubernetes.core.k8s_cp:
    #     namespace: "{{ _gitea_pod_def.metadata.namespace }}"
    #     pod: "{{ _gitea_pod_def.metadata.name }}"
    #     container: "gitea"
    #     state: from_pod
    #     remote_path: "/tmp/{{ _backup_file_prefix }}.{{ _backup_file_suffix }}"
    #     local_path:  "{{ _backup_file_path }}"

    - name: Copy backup to local
      shell: >
        kubectl cp
        {{ _gitea_pod_def.metadata.namespace }}/{{ _gitea_pod_def.metadata.name }}:/tmp/{{ _backup_file_prefix }}.{{ _backup_file_suffix }}
        {{ _backup_file_path }}

    - name: Delete the dump on the gitea pod.
      kubernetes.core.k8s_exec:
        namespace: "{{ _gitea_pod_def.metadata.namespace }}"
        pod: "{{ _gitea_pod_def.metadata.name }}"
        container: "gitea"
        command: >
          rm /tmp/{{ _backup_file_prefix }}.{{ _backup_file_suffix }}

    - name: Send backup to s3 destinations.
      include_tasks: "s3.yml"
      loop: "{{ gitea_backup.destinations | default([]) | selectattr('type', '==', 's3') }}"
      loop_control:
        extended: yes
        label: "{{ _backup.name | default(ansible_loop.index0) }}"
        loop_var: _backup

    - name: Send backup to rsync destinations.
      include_tasks: "sftp.yml"
      loop: "{{ gitea_backup.destinations | default([]) | selectattr('type', '==', 'sftp') }}"
      loop_control:
        extended: yes
        label: "{{ _backup.name | default(ansible_loop.index0) }}"
        loop_var: _backup

  handlers:
    - name: delete temp items
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ _run_temp_dir.path }}"
